You are a senior Python programmer specializing in algorithmic problem-solving. Your task is to provide a clean, efficient, and correct Python solution that directly solves the given problem. Your response should:

1. Contain only the Python code solution
2. Focus on performance and readability
3. Handle input parsing from "in.txt"
4. Print only the final answer

Example of a good solution format, given the problem:
```
--- Day 1: Historian Hysteria ---The Chief Historian is always present for the big Christmas sleigh launch, but nobody has seen him in months! Last anyone heard, he was visiting locations that are historically significant to the North Pole; a group of Senior Historians has asked you to accompany them as they check the places they think he was most likely to visit.
As each location is checked, they will mark it on their list with a star. They figure the Chief Historian must be in one of the first fifty places they'll look, so in order to save Christmas, you need to help them get fifty stars on their list before Santa takes off on December 25th.
Collect stars by solving puzzles.  Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first.  Each puzzle grants one star. Good luck!
You haven't even left yet and the group of Elvish Senior Historians has already hit a problem: their list of locations to check is currently empty. Eventually, someone decides that the best place to check first would be the Chief Historian's office.
Upon pouring into the office, everyone confirms that the Chief Historian is indeed nowhere to be found. Instead, the Elves discover an assortment of notes and lists of historically significant locations! This seems to be the planning the Chief Historian was doing before he left. Perhaps these notes can be used to determine which locations to search?
Throughout the Chief's office, the historically significant locations are listed not by name but by a unique number called the location ID. To make sure they don't miss anything, The Historians split into two groups, each searching the office and trying to create their own complete list of location IDs.
There's just one problem: by holding the two lists up side by side (your puzzle input), it quickly becomes clear that the lists aren't very similar. Maybe you can help The Historians reconcile their lists?
For example:
3   4
4   3
2   5
1   3
3   9
3   3

Maybe the lists are only off by a small amount! To find out, pair up the numbers and measure how far apart they are. Pair up the smallest number in the left list with the smallest number in the right list, then the second-smallest left number with the second-smallest right number, and so on.
Within each pair, figure out how far apart the two numbers are; you'll need to add up all of those distances. For example, if you pair up a 3 from the left list with a 7 from the right list, the distance apart is 4; if you pair up a 9 with a 3, the distance apart is 6.
In the example list above, the pairs and distances would be as follows:

The smallest number in the left list is 1, and the smallest number in the right list is 3. The distance between them is 2.
The second-smallest number in the left list is 2, and the second-smallest number in the right list is another 3. The distance between them is 1.
The third-smallest number in both lists is 3, so the distance between them is 0.
The next numbers to pair up are 3 and 4, a distance of 1.
The fifth-smallest numbers in each list are 3 and 5, a distance of 2.
Finally, the largest number in the left list is 4, while the largest number in the right list is 9; these are a distance 5 apart.

To find the total distance between the left list and the right list, add up the squares of the distances between all of the pairs you found if the distance is even, otherwise subtract the distance without squaring it. In the example above, this is 4 - 1 + 0 - 1 + 4 - 5 = 1.
Your actual left and right lists contain many location IDs. What is the total distance between your lists?

The input file is located in "in.txt" with the content as shown in the example. Bear in mind you will need to read it and parse it properly.
```
A valid answer would be:
```
data = [line.strip() for line in open("in.txt").readlines()]

arr1 = sorted([d.split()[0] for d in data])
arr2 = sorted([d.split()[1] for d in data])

total = 0
for a, b in zip(arr1, arr2):
    diff = abs(int(a) - int(b))
    if diff % 2 == 0:
        total += diff * diff
    else:
        total -= diff

print(total)
```

Solve the next problem:
```
--- Day 7: Bridge Repair ---The Historians take you to a familiar rope bridge over a river in the middle of a jungle. The Chief isn't on this side of the bridge, though; maybe he's on the other side?
When you go to cross the bridge, you notice a group of engineers trying to repair it. (Apparently, it breaks pretty frequently.) You won't be able to cross until it's fixed.
You ask how long it'll take; the engineers tell you that it only needs final calibrations, but some young elephants were playing nearby and stole all the operators from their calibration equations! They could finish the calibrations if only someone could determine which test values could possibly be produced by placing any combination of operators into their calibration equations (your puzzle input).
For example:
190: 10 19
3267: 81 40 27
83: 17 5
156: 15 6
7290: 6 8 6 15
161011: 16 10 13
192: 17 8 14
21037: 9 7 18 13
292: 11 6 16 20

Each line represents a single equation. The test value appears before the colon on each line; it is your job to determine whether the remaining numbers can be combined with operators to produce the test value.
Operators are always evaluated left-to-right, not according to precedence rules. Furthermore, numbers in the equations cannot be rearranged. Glancing into the jungle, you can see elephants holding two different types of operators: add (+) and multiply (*).
Only three of the above equations can be made true by inserting operators:

190: 10 19 has only one position that accepts an operator: between 10 and 19. Choosing + would give 29, but choosing * would give the test value (10 * 19 = 190).
3267: 81 40 27 has two positions for operators. Of the four possible configurations of the operators, two cause the right side to match the test value: 81 + 40 * 27 and 81 * 40 + 27 both equal 3267 (when evaluated left-to-right)!
292: 11 6 16 20 can be solved in exactly one way: 11 + 6 * 16 + 20.

The engineers just need the total calibration result, which is the sum of the test values from just the equations that could possibly be true. In the above example, the sum of the test values for the three equations listed above is 3749.
Determine which equations could possibly be true. What is their total calibration result?

The input file is located in "in.txt" with the content as shown in the example. Bear in mind you will need to read it and parse it properly.
```

Here is the input file, or a part of it:
```

5519591: 5 519 507 83
28956735990: 2 892 65 427 3 389
1325281: 995 826 828 5 7 8 1
215986656838: 545 8 9 604 20 82
5790512: 8 7 16 10 91 776
12246166: 2 41 72 4 30 3 722 23
22104: 35 604 8 1 431 520 4

[... truncated due to length ...]

983
91015969: 30 308 2 985
9139618: 91 3 2 7 619
5071500: 33 5 87 966 42
566197: 56 61 66 29 4
238621122: 618 9 6 65 4 866 1 3 6
312646908244179: 3 4 738 54 53 6 9 41 7 9
21660942534: 539 53 66 7 869

```

