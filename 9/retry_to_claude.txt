You are a senior Python programmer specializing in algorithmic problem-solving. Your previous solution to this problem was incorrect. The solution produced Need_something_more_efficient as output, which is incorrect. Here is the original problem and your failed solution. Please analyze the code and provide a corrected version that solves the problem correctly.

Original Problem and Input:
You are a senior Python programmer specializing in algorithmic problem-solving. Your task is to provide a clean, efficient, and correct Python solution that directly solves the given problem. Your response should:

1. Contain only the Python code solution
2. Focus on performance and readability
3. Handle input parsing from "in.txt"
4. Print only the final answer

Example of a good solution format, given the problem:
```
--- Day 1: Historian Hysteria ---The Chief Historian is always present for the big Christmas sleigh launch, but nobody has seen him in months! Last anyone heard, he was visiting locations that are historically significant to the North Pole; a group of Senior Historians has asked you to accompany them as they check the places they think he was most likely to visit.
As each location is checked, they will mark it on their list with a star. They figure the Chief Historian must be in one of the first fifty places they'll look, so in order to save Christmas, you need to help them get fifty stars on their list before Santa takes off on December 25th.
Collect stars by solving puzzles.  Two puzzles will be made available on each day in the Advent calendar; the second puzzle is unlocked when you complete the first.  Each puzzle grants one star. Good luck!
You haven't even left yet and the group of Elvish Senior Historians has already hit a problem: their list of locations to check is currently empty. Eventually, someone decides that the best place to check first would be the Chief Historian's office.
Upon pouring into the office, everyone confirms that the Chief Historian is indeed nowhere to be found. Instead, the Elves discover an assortment of notes and lists of historically significant locations! This seems to be the planning the Chief Historian was doing before he left. Perhaps these notes can be used to determine which locations to search?
Throughout the Chief's office, the historically significant locations are listed not by name but by a unique number called the location ID. To make sure they don't miss anything, The Historians split into two groups, each searching the office and trying to create their own complete list of location IDs.
There's just one problem: by holding the two lists up side by side (your puzzle input), it quickly becomes clear that the lists aren't very similar. Maybe you can help The Historians reconcile their lists?
For example:
3   4
4   3
2   5
1   3
3   9
3   3

Maybe the lists are only off by a small amount! To find out, pair up the numbers and measure how far apart they are. Pair up the smallest number in the left list with the smallest number in the right list, then the second-smallest left number with the second-smallest right number, and so on.
Within each pair, figure out how far apart the two numbers are; you'll need to add up all of those distances. For example, if you pair up a 3 from the left list with a 7 from the right list, the distance apart is 4; if you pair up a 9 with a 3, the distance apart is 6.
In the example list above, the pairs and distances would be as follows:

The smallest number in the left list is 1, and the smallest number in the right list is 3. The distance between them is 2.
The second-smallest number in the left list is 2, and the second-smallest number in the right list is another 3. The distance between them is 1.
The third-smallest number in both lists is 3, so the distance between them is 0.
The next numbers to pair up are 3 and 4, a distance of 1.
The fifth-smallest numbers in each list are 3 and 5, a distance of 2.
Finally, the largest number in the left list is 4, while the largest number in the right list is 9; these are a distance 5 apart.

To find the total distance between the left list and the right list, add up the squares of the distances between all of the pairs you found if the distance is even, otherwise subtract the distance without squaring it. In the example above, this is 4 - 1 + 0 - 1 + 4 - 5 = 1.
Your actual left and right lists contain many location IDs. What is the total distance between your lists?

The input file is located in "in.txt" with the content as shown in the example. Bear in mind you will need to read it and parse it properly.
```
A valid answer would be:
```
data = [line.strip() for line in open("in.txt").readlines()]

arr1 = sorted([d.split()[0] for d in data])
arr2 = sorted([d.split()[1] for d in data])

total = 0
for a, b in zip(arr1, arr2):
    diff = abs(int(a) - int(b))
    if diff % 2 == 0:
        total += diff * diff
    else:
        total -= diff

print(total)
```

Solve the next problem:
```
--- Day 9: Disk Fragmenter ---Another push of the button leaves you in the familiar hallways of some friendly amphipods! Good thing you each somehow got your own personal mini submarine. The Historians jet away in search of the Chief, mostly by driving directly into walls.
While The Historians quickly figure out how to pilot these things, you notice an amphipod in the corner struggling with his computer. He's trying to make more contiguous free space by compacting all of the files, but his program isn't working; you offer to help.
He shows you the disk map (your puzzle input) he's already generated. For example:
2333133121414131402
The disk map uses a dense format to represent the layout of files and free space on the disk. The digits alternate between indicating the length of a file and the length of free space.
So, a disk map like 12345 would represent a one-block file, two blocks of free space, a three-block file, four blocks of free space, and then a five-block file. A disk map like 90909 would represent three nine-block files in a row (with no free space between them).
Each file on disk also has an ID number based on the order of the files as they appear before they are rearranged, starting with ID 0. So, the disk map 12345 has three files: a one-block file with ID 0, a three-block file with ID 1, and a five-block file with ID 2. Using one character for each block where digits are the file ID and . is free space, the disk map 12345 represents these individual blocks:
0..111....22222
The first example above, 2333133121414131402, represents these individual blocks:
00...111...2...333.44.5555.6666.777.888899
The amphipod would like to move file blocks one at a time from the end of the disk to the leftmost free space block (until there are no gaps remaining between file blocks). For the disk map 12345, the process looks like this:
0..111....22222
02.111....2222.
022111....222..
0221112...22...
02211122..2....
022111222......

The first example requires a few more steps:
00...111...2...333.44.5555.6666.777.888899
009..111...2...333.44.5555.6666.777.88889.
0099.111...2...333.44.5555.6666.777.8888..
00998111...2...333.44.5555.6666.777.888...
009981118..2...333.44.5555.6666.777.88....
0099811188.2...333.44.5555.6666.777.8.....
009981118882...333.44.5555.6666.777.......
0099811188827..333.44.5555.6666.77........
00998111888277.333.44.5555.6666.7.........
009981118882777333.44.5555.6666...........
009981118882777333644.5555.666............
00998111888277733364465555.66.............
0099811188827773336446555566..............

The final step of this file-compacting process is to update the filesystem checksum. To calculate the checksum, add up the result of multiplying each of these blocks' position with the file ID number it contains. The leftmost block is in position 0. If a block contains free space, skip it instead.
Continuing the first example, the first few blocks' position multiplied by its file ID number are 0 * 0 = 0, 1 * 0 = 0, 2 * 9 = 18, 3 * 9 = 27, 4 * 8 = 32, and so on. In this example, the checksum is the sum of these, 1928.
Compact the amphipod's hard drive using the process he requested. What is the resulting filesystem checksum? (Be careful copy/pasting the input for this puzzle; it is a single, very long line.)

The input file is located in "in.txt" with the content as shown in the example. Bear in mind you will need to read it and parse it properly.
```

Here is the input file, or a part of it:
```

71801458638945906735378792713148808529464534303257235953879467313711717150491468856122209261207385896183975671231950194924687678691171917729439486819895574093244321633593327172935116817265681572112140

[... truncated due to length ...]

6317634876314616687483169556584711492439317213104734277472748672153763231986922721374537962122771393468050767945428419557465627778816617413780378411292739218577126522639657922672306453112830967439418

```



Your previous solution that needs fixing:
```python
data = open("in.txt").read().strip()

# Parse input into alternating file sizes and free space sizes
sizes = [int(x) for x in data]

# Build initial file layout
blocks = []
file_id = 0
pos = 0
for i, size in enumerate(sizes):
    if i % 2 == 0:  # File
        blocks.extend([file_id] * size)
        file_id += 1
    else:  # Free space
        blocks.extend(['.'] * size)

# Move files left into free spaces
for i in range(len(blocks)):
    if blocks[i] == '.':  # Found free space
        # Find rightmost file block
        for j in range(len(blocks)-1, i, -1):
            if blocks[j] != '.':
                # Move file block to free space
                blocks[i] = blocks[j]
                blocks[j] = '.'
                break

# Calculate checksum
checksum = 0
for pos, block in enumerate(blocks):
    if block != '.':
        checksum += pos * block

print(checksum)
```

Please provide a corrected solution that:
1. Fixes any logical errors in the previous attempt
2. Maintains good performance and readability
3. Properly handles input parsing
4. Prints only the final answer

Provide only the corrected Python code without any explanation or markdown formatting.
